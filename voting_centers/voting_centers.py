# stdlib
import asyncio as aio
import random
# library
import aiohttp
import usaddress
from shapely.geometry import Point, Polygon

FORM_URL = 'http://www.ocfelections.com/voter_lookup/FindPollingPlace.aspx'
FORM_STATIC = {
    '__VIEWSTATE': r'',
    '__EVENTVALIDATION': r'/wEdAAudxyHFTz9pSuAfwf5leStR8vjTV+GVcyUr0ppydEU7OkHDamSzvn1YVxEFow4IC7TYkDBFrdXhsXFluM6wVDalUkWxSr+iTejsQKXZaYJ1dG0ldt/igP0fvmkgOrjegHs7tYmoRW3cSH6LpXWbEp/3WPkGlWUbK9NB92eUlxH7PgEVlPB5iMR5DreNNDZPEe7MtotaYEhF7wpatA/s9IlyUdLXWkh63m6g+Xq3JUDGvbsuahFWzoviqP+Hgj9XAoSxwk7tnvCcfNoE6qxYL43d',
    'submitBtn': 'Find Your Polling Place'
}

def point_in_polygon(polygon: Polygon) -> Point:
    """
    """
    minx, miny, maxx, maxy = polygon.bounds
    point = Point(random.uniform(minx, maxx), random.uniform(miny, maxy))
    while not polygon.contains(point):
        point = Point(random.uniform(minx, maxx), random.uniform(miny, maxy))
    return point

async def coord_to_addr(coord: (float, float)) -> (str, int):
    """
    """
    pass

def extract_center(html) -> dict:
    """
    """
    return html

async def fetch_center(address: str, zip: int) -> dict:
    """
    """
    addr = usaddress.tag(address)[0]
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    form = {
        'STRT_NMBR': addr['AddressNumber'],
        'drctnDDL': addr.get('StreetNamePreDirectional'),
        'StrNmeTb': addr['StreetName'],
        'ZP_CDE': str(zip)
    }
    form.update(FORM_STATIC)
    print(form)
    async with aiohttp.ClientSession() as session:
        async with session.post(FORM_URL, headers=headers, data=form) as response:
            html = await response.text()
    return extract_center(html)

async def get_center(geom: Polygon) -> dict:
    """
    """
    return {}

def make_centers(geoms: dict) -> [dict]:
    """
    """
    coros = [get_center(Polygon(geom)) for geom in geoms]
    return aio.get_event_loop().run_until_complete(*coros)

if __name__ == '__main__':
    # import json
    # geoms = json.load(open('data/geometries.geojson'))
    # ret = make_centers(geoms[:1])
    # print(ret, file=open('out.txt', 'w'))

    print(aio.get_event_loop().run_until_complete(fetch_center('101 S Garland Ave', 32801)))