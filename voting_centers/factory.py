"""
factory.py - Command line utility for shaping voting center data
"""

# stdlib
import json
from os import path
# library
import begin
import shapefile
from dbfread import DBF

@begin.subcommand
def centers(input: 'Path to the precinct geometry file generated by "geoms"',
            output: 'Name of the output JSON file' = 'centers') -> int:
    """
    Generates the voting centers list by querying the Orange County website

    Ex: python factory.py centers data/geometries.geojson
    """
    from voting_centers import make_centers
    geoms = json.load(open(input))['features']
    if not output.endswith('.json'):
        output += '.json'
    existing = json.load(open(output)) if path.exists(output) else {}
    geoms = [geom for geom in geoms if geom['properties']['precinct'] not in existing]
    if not geoms:
        print('All centers available')
        return 0
    print(f'Fetching for {len(geoms)} precincts')
    existing.update(make_centers(geoms))
    json.dump(existing, open(output, 'w'), indent=4, sort_keys=True)
    return 0

@begin.subcommand
def geoms(input: 'Name of the files to be converted (dbf, shp)',
          output: 'Name of the output GeoJSON file' = 'geometries') -> int:
    """
    Convert ArcGIS data files into a GeoJSON output

    The input files must all have the same name

    Ex: python factory.py geoms resources/precinct_files/May2016Precinct_region.shp
    """
    # Remove the file ext
    input = '.'.join(input.split('.')[:-1])
    # Import meta data and shapes
    dbf = DBF(input + '.dbf')
    shapes = shapefile.Reader(input + '.shp').shapes()
    if len(dbf) != len(shapes):
        raise Exception('Files do not have the same number of elements')
    # Format shape files into an ID key dict of GeoJSON objects
    features = []
    for meta, shape in zip(dbf, shapes):
        if shape.shapeType == shapefile.POLYGONZ:
            features.append({
                'type': 'Feature',
                'geometry': {
                    'type': 'Polygon',
                    'coordinates': [shape.points]
                },
                'properties': {k.lower(): v for k, v in meta.items()}
            })
    # Export as a JSON file
    json.dump({
        'type': 'FeatureCollection',
        'features': features
    }, open(output + '.geojson', 'w'))
    return 0

@begin.subcommand
def voting(centers: 'Voting centers file path',
           dates: 'Election dates file path',
           geoms: 'Geometry file path') -> int:
    """
    Generate master output from voter center, election date, and precinct geometries data files

    The output is placed into a publically-callable place for Citygram to pull from like S3
    """
    centers, dates, geoms = [json.load(open(path)) for path in (centers, dates, geoms)]
    print(dates)
    return 0

@begin.start
def main():
    """
    Command line utility for shaping voting center data
    """
    pass
